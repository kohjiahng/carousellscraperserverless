org: jiahng
app: carousell-discord-scraper
service: CarousellDiscordScraper
frameworkVersion: "3"
useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-southeast-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: !Ref CommandTopic
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
          Resource:
            - !GetAtt RequestTable.Arn
            - !GetAtt ListingTable.Arn
            - !GetAtt WebhookTable.Arn
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "*"

custom:
  scheduleEnabled:
    dev: false
    prod: true
package:
  individually: true

functions:
  proxyLambda:
    handler: proxylambda/index.handler
    environment:
      COMMAND_TOPIC_ARN: !Ref CommandTopic
    package:
      patterns:
        - "!./**"
        - proxylambda/**

  startHandler:
    handler: starthandler/index.handler
    environment:
      REQUEST_TABLE_ARN: !Ref RequestTable
      WEBHOOK_HANDLER_ARN: !GetAtt WebhookHandlerLambdaFunction.Arn
    package:
      patterns:
        - "!./**"
        - starthandler/**
        - handlerpackage/**
    events:
      - sns:
          arn: !Ref CommandTopic
          topicName: CommandTopic
          filterPolicy:
            command:
              - start

  statusHandler:
    handler: statushandler/index.handler
    environment:
      REQUEST_TABLE_ARN: !Ref RequestTable
    package:
      patterns:
        - "!./**"
        - statushandler/**
        - handlerpackage/**
    events:
      - sns:
          arn: !Ref CommandTopic
          topicName: CommandTopic
          filterPolicy:
            command:
              - status

  stopHandler:
    handler: stophandler/index.handler
    environment:
      REQUEST_TABLE_ARN: !Ref RequestTable
    package:
      patterns:
        - "!./**"
        - stophandler/**
        - handlerpackage/**
    events:
      - sns:
          arn: !Ref CommandTopic
          topicName: CommandTopic
          filterPolicy:
            command:
              - stop

  idScraperLambda:
    handler: idscraperlambda/index.handler
    environment:
      LISTING_TABLE_ARN: !Ref ListingTable
    package:
      patterns:
        - "!./**"
        - idscraperlambda/**

  scraperProxy:
    handler: scraperproxy/index.handler
    environment:
      REQUEST_TABLE_ARN: !Ref RequestTable
      ID_SCRAPER_ARN: !GetAtt IdScraperLambdaLambdaFunction.Arn
    package:
      patterns:
        - "!./**"
        - scraperproxy/**
    events:
      - schedule:
          rate: rate(2 minutes)
          enabled: ${self:custom.scheduleEnabled.${sls:stage}}

  webhookHandler:
    handler: webhookhandler/index.handler
    environment:
      WEBHOOK_TABLE_ARN: !Ref WebhookTable
      DISCORD_BOT_TOKEN: ${env:DISCORD_BOT_TOKEN}
    package:
      patterns:
        - "!./**"
        - webhookhandler/**
  listingHandler:
    handler: listinghandler/index.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ListingTable.StreamArn
          batchSize: 1
          filterPatterns:
            - eventName: [INSERT]
    package:
      patterns:
        - "!./**"
        - listinghandler/**

resources:
  Resources:
    CommandTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: CarousellDiscordScraperCommandTopic-${sls:stage}

    ProxyLambdaInvoker:
      Type: AWS::IAM::User
      Properties:
        UserName: "ProxyLambdaInvoker-${sls:stage}"
        Policies:
          - PolicyName: ProxyLambdaInvokePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: !GetAtt ProxyLambdaLambdaFunction.Arn

    ProxyLambdaInvokerUserKey:
      Type: AWS::IAM::AccessKey
      Properties:
        UserName:
          Ref: ProxyLambdaInvoker

    RequestTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CarousellDiscordScraperRequestTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: channel_id
            AttributeType: S
        KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 1

    ListingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CarousellDiscordScraperListingTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: channel_id
            AttributeType: S
          - AttributeName: listing_id
            AttributeType: S
        KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
          - AttributeName: listing_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 10
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    WebhookTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CarousellDiscordScraperWebhookTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: channel_id
            AttributeType: S
        KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

outputs:
  ProxyLambdaInvokerAccessKeyID: !Ref ProxyLambdaInvokerUserKey
  ProxyLambdaInvokerSecretAccessKey: !GetAtt ProxyLambdaInvokerUserKey.SecretAccessKey
  ProxyLambdaArn: !GetAtt ProxyLambdaLambdaFunction.Arn
